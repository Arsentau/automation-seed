name: Manual Execution

permissions:
  contents: write

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      log_level:
        description: Specifies the log level
        required: true
        type: choice
        default: 'info'
        options:
          - 'trace'
          - 'debug'
          - 'info'
          - 'warn'
          - 'error'
          - 'silent'

      suite:
        description: Suite to be executed
        default: 'debug'
        required: true

      spec:
        description: Spec to be executed. (Won't be used if suite is specified)
        default: ''
        required: false

      max_instances:
        description: Maximum number of instances to be executed
        default: ''
        required: false

      chrome_instances:
        description: Amount of Chrome Instances to be used. Won't use Chrome when its value is a blank string
        default: '1'
        required: false

      firefox_instances:
        description: Amount of Firefox Instances to be used. Won't use Firefox when its value is a blank string
        default: ''
        required: false

      browser_visible:
        description: Specifies whether the browser is visible on the Remote Dashboard. If false, the browsers will run in headless mode.
        type: boolean
        default: true
        required: false

      enable_video:
        description: Specifies whether browser is recorded or not. Will be disabled if the browsers run in headless mode.
        type: boolean
        default: true
        required: false

      update_report:
        description: Specifies whether the report is updated or not.
        type: boolean
        default: false
        required: false

jobs:
  run-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Begin CI...
        uses: actions/checkout@v3

      - name: Start selenoid
        uses: Xotabu4/selenoid-github-action@v2

      - uses: actions/setup-node@v3
        with:
          node-version: '16.13.2'

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies without generating a lockfile and fail if an update is needed
        run: yarn --frozen-lockfile

      - name: Execute test Suite
        run: yarn test:remote --suite ${{ github.event.inputs.suite }}
        if: ${{ github.event.inputs.suite != '' }}
        env:
          OUTPUT_DIR: '../../logs'
          WEBDRIVER_LOGLEVEL: ${{ github.event.inputs.log_level }}
          BROWSER_VISIBLE: ${{ github.event.inputs.browser_visible }}
          ENABLE_VIDEO: ${{ github.event.inputs.enable_video }}
          MAX_INSTANCES: ${{ github.event.inputs.max_instances }}
          CHROME: ${{ github.event.inputs.chrome_instances }}
          FIREFOX: ${{ github.event.inputs.firefox_instances }}
          WEBDRIVER_SPEC_FILE_RETRIES: 1

      - name: Execute test Spec
        run: yarn test:remote --spec ${{ github.event.inputs.spec }}
        if: ${{ github.event.inputs.spec != '' }}
        env:
          OUTPUT_DIR: '../../logs'
          WEBDRIVER_LOGLEVEL: ${{ github.event.inputs.log_level }}
          BROWSER_VISIBLE: ${{ github.event.inputs.browser_visible }}
          ENABLE_VIDEO: ${{ github.event.inputs.enable_video }}
          MAX_INSTANCES: ${{ github.event.inputs.max_instances }}
          CHROME: ${{ github.event.inputs.chrome_instances }}
          FIREFOX: ${{ github.event.inputs.firefox_instances }}
          WEBDRIVER_SPEC_FILE_RETRIES: 1

      - name: Create Artifact
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: result
          if-no-files-found: warn
          path: |
            ~/.aerokube/selenoid
            logs
            allure-results
            allure-report

      - name: Save history
        if: ${{ always() && github.event.inputs.update_report == 'true' }}
        # trying to save history of previous runs if it exists
        run: cp -r $(pwd)/docs/history/. $(pwd)/allure-results/history || true

      - name: Create report
        if: ${{ always() && github.event.inputs.update_report == 'true' }}
        run: yarn report --clean

      - name: Deploy report
        uses: JamesIves/github-pages-deploy-action@v4.3.3
        if: ${{ always() && github.event.inputs.update_report == 'true' }}
        with:
          branch: main # The branch the action should deploy to.
          folder: allure-report # The folder the action should deploy.
          target-folder: docs
